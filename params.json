{"name":"Gwtf","body":"What?\r\n=====\r\n\r\nGo With The Flow is a Unix CLI orientated todo/task tracker.\r\n\r\nEach todo item has a short description, a optional long description,\r\na status and a work log.\r\n\r\nIt supports different projects with unique lists of tasks and can track\r\ntime worked per task either through specifically supplying time worked\r\nor via sub-shells.\r\n\r\ngwtf is written using the excellent gli gem so it behaves a lot like\r\nthe git command line.\r\n\r\nTasks are stored in simple JSON files and each time you save or edit a\r\ntask a backup of the previous state is made.  There is a simple Ruby\r\nAPI for interacting with the tasks list in your own code.\r\n\r\nTime and Date specifications are where possible done using flexible\r\nnatural language parsing provided by a combination Chronic and at(1)\r\n\r\nInstallation?\r\n=============\r\n\r\nThe simplest is to install it using the Gem, you'll get all dependencies\r\netc sorted out.\r\n\r\nI install gems into my private gem dir so I do not disrupt the system:\r\n\r\n    % export GEM_HOME=/home/rip/.gem\r\n    % PATH=$PATH:/home/rip/.gem/bin\r\n    % gem install gwtf\r\n\r\nthis can be done as a normal user, no root required and no changes to your\r\nOS required to use it.\r\n\r\nBasic Usage?\r\n============\r\n\r\nBy default tasks are written to ~/.gwtf.d/ directory, sub directories\r\nper project exist under this directory.\r\n\r\nI alias gwtf to the _t_ command using my shell alias facilities.\r\n\r\nAdding a task\r\n-------------\r\n\r\n    % gwtf new this is a test task\r\n    Created a new project default in /home/rip/.gwtf.d/default\r\n       29                 this is a test task\r\n\r\nYou can pass an optional _--edit_ or _-e_ flag to the new command that\r\nwill start your editor configured using EDITOR to edit the long form\r\ndescription of a task\r\n\r\nWhen creating an item you can pass the same arguments as to the remind\r\ncommand which will schedule an emailed reminder.  See the _Reminders_\r\nsection below for details.\r\n\r\n    % gwtf new this is a test --remind=\"now + 1 week\" --done --ifopen\r\n    Creating reminder at job for item 30: job 46 at 2012-03-13 20:09\r\n       30                 this is a test\r\n\r\nThe above command will send an email alert 1 week from now if the item has\r\nnot already been completed and mark the item as done after sending the alert,\r\nmore details in the Remind section\r\n\r\nYou can set a due date for a specific task, tasks with due date will be\r\ncolorized in your list output - yellow for items due today or morrow and\r\nred for overdue items.  Due dates are shown in the list output etc\r\n\r\n     % gwtf new --due=\"2012/04/07\" this is a test\r\n\r\n     Project test items: 1 / 11\r\n\r\n        77     2012/04/07 test\r\n\r\nThe due date can be specificed in formats supported by [Chronic](https://github.com/mojombo/chronic)\r\n\r\nReminders can be specificed using the Chronic, in the case where Chronic\r\nto parse it will fall back to at(1) parsing allowing arguments like \"now +1 week\"\r\nin addition to what Chronic supports.\r\n\r\nLogging work for a task\r\n-----------------------\r\n\r\nEach task has a work log that you can write to:\r\n\r\n    % gwtf log 0 \"Create a README file\" -m 20\r\n    Logged 'Create a README file' against item 0 for 20 minutes 0 seconds\r\n\r\nViewing a task\r\n--------------\r\n\r\n    % gwtf show 0\r\n             ID: 0\r\n        Subject: this is a test task\r\n         Status: open\r\n    Time Worked: 20 minutes 0 seconds\r\n        Created: 03/10/12 21:23\r\n\r\n    Work Log:\r\n                 03/10/12 21:25 Create a README file\r\n\r\nCompleting a task\r\n-----------------\r\n\r\n    % gwtf done 0\r\n    Marked item 0 as done\r\n\r\nList of tasks\r\n-------------\r\n\r\nBy default completed tasks are not shown:\r\n\r\n    % gwtf list\r\n        1 D   2012-03-10 this is another test task to demonstrate\r\n\r\n    Items: 1 / 2\r\n\r\nBut you can list all tasks:\r\n\r\n    % gwtf ls -a\r\n        0 C              this is a test task\r\n        1 D   2012-03-10 this is another test task to demonstrate\r\n\r\n    Items: 1 / 2\r\n\r\nThe _C_ and _D_ flags indicate that item 0 is Closed while item 1 has a\r\nfull Description that you can view with the show command. There are also\r\na _L_ flag that indicate an item has work log items and _O_ that means it's\r\noverdue.\r\n\r\nThere's a short summary mode ideal for using in your login scripts:\r\n\r\n    % gwtf ls --summary\r\n    Items in all projects:\r\n\r\n       gwtf: open:   5: closed   4: total:   9\r\n       test: open:   0: closed   4: total:   4\r\n\r\nEditing a task\r\n--------------\r\n\r\nYou can edit a task subject right on the command line:\r\n\r\n    % gwtf edit 1 /another/the first\r\n    1 (open): this is the first test task to demonstrate\r\n\r\nIf you leave off the replacement logic it will edit the item using your\r\neditor as defined in EDITOR\r\n\r\nLogging work done interactively?\r\n--------------------------------\r\n\r\nIf you're working on some code you can track the time spent working\r\non it using gwtf:\r\n\r\n    % gwtf new add a readme file\r\n    Item 3 saved\r\n\r\n    % gwtf shell 3\r\n    Starting work on item 3, exit to record the action and time\r\n    %\r\n\r\nThis shell will have GWTF_ITEM, GWTF_PROJECT and GWTF_SUBJECT environment\r\nvariables set for use in your prompt or shell script.\r\n\r\nNow you can work in this shell and once you're done simply exit it:\r\n\r\n    % exit\r\n    Optional description for work log (start with done! to close):: First stab at writing a readme file\r\n    Recorded 91.6566 seconds of work against item 3\r\n\r\nYour log will be visible in the show command along with a total work time\r\nfor the task:\r\n\r\n             ID: 3\r\n        Subject: add a readme file\r\n         Status: open\r\n    Time Worked: 1 minutes 32 seconds\r\n        Created: 03/10/12 21:41\r\n\r\n    Work Log:\r\n                 03/10/12 21:43 First stab at writing a readme file (1 minutes 32 seconds)\r\n\r\nYou can pass *--pre* and *--post* flags to the shell command that will run shell commands\r\nbefore and after the subshell, this is good for tweaking your tmux status bar while working\r\non tasks for example\r\n\r\nProjects?\r\n=========\r\n\r\nThere is a very simplistic project model that simply creates a new\r\nset of tasks in a different sub-directory off the top directory.\r\n\r\n    % gwtf --project=acme new this is a different project\r\n    Created a new project acme in /home/rip/.gwtf.d/acme\r\n    Item 2 saved\r\n\r\nNote that item numbers a unique for the entire installation to avoid\r\nconfusion due to overlapping item numbers.\r\n\r\nReminders\r\n=========\r\n\r\nTo facilitate reminders by email we use your at system and the normal mail command present\r\nin most Unix systems.  To schedule a reminder for an item you can use anything your at will\r\naccept as a time specification:\r\n\r\n    % gwtf remind 3 now + 1 week\r\n\r\nThis will create an at job that will in a week call gwtf asking it to send an email immediately.\r\nThe email will be sent using the normal mail command to your Unix user.  You should have a\r\n.forward file in place to send mail to where you need it otherwise you can invoke the remind\r\ncommand with --recipient\r\n\r\nIf you want to set a reminder for a future time but only if the item is still open by that time\r\npass the --ifopen flag when creating the reminder\r\n\r\nTo cancel reminders or see which ones you have scheduled use your normal at commands like atq\r\nand atrm\r\n\r\nYou can send notifications to iPhone, iPads and Macs using Boxcar, see the BOXCAR.md file in\r\nthe git repository for details. Notfio is also supported for Android users, see the NOTIFO.md\r\nfile for details.\r\n\r\nAdding a reminder only task\r\n---------------------------\r\n\r\nWe support reminders by abusing the projects feature creating a project specific to reminders.\r\n\r\nTo schedule a simple reminder for something do:\r\n\r\n    % gwtf remind --at=\"now +1 hour\" do something\r\n    Creating reminder at job for item 84: job 66 at 2012-04-10 15:11\r\n       103 L   2012-04-13 do something\r\n\r\n\r\nReminder items will have their due date set to the date the reminder will be sent and have a\r\nwork log entry witht he output from at(1)\r\n\r\nThis creates an item in the _reminders_ project. It's really just a shortcut to the following\r\ncommand:\r\n\r\n     % gwtf -p reminders new --remind=\"now +1 hour\" --done --ifopen do something\r\n\r\nYou can easily cancel a reminder:\r\n\r\n    % gwtf -p reminders ls\r\n    Project reminders items: 1 / 3\r\n\r\n       103 L   2012-04-13 do something\r\n\r\n    % gwtf -p reminders done 84\r\n       103 CL  2012-04-13 do something\r\n\r\nThe _reminders_ project is one that is ignored by the _list --summary_ and _list --overview_\r\ncommands so they do not show up as tasks, but other than that they are just normal items that\r\nyou can manage same as any other task.\r\n\r\nThese reminders might get recurring features in future\r\n\r\nDaily Summary Emails\r\n====================\r\n\r\nThere is a helper to generate various emails about your items, you should call this from your\r\nnormal cron daemon\r\n\r\nTo send a reminder about item 10, only if it's not already marked as done and mark it done\r\nonce the notification has been sent:\r\n\r\n    % gwtf notify --remind=10 --ifopen --done\r\n\r\nTo send a email with a overview similar to the _list --overview_ command:\r\n\r\n    % gwtf notify --overview\r\n\r\nAnd finally to send a list of any due and overdue items - no mail will be sent if nothig is due:\r\n\r\n    % gwtf notify --due\r\n\r\nThe first command supports sending reminders to Boxcar, see the BOXCAR.md in the git repository\r\nthe rest of the commands only support email.\r\n\r\nYou can specify multiple recipients using _--recipient_ in a command seperated list:\r\n\r\n   % gwtf notify --recipient=\"you@your.com,boxcar://you@your.com\" --remind-10\r\n\r\nDefault Project, Data Dir or Email Recipient?\r\n=============================================\r\n\r\nYou can adjust the default data dir and project which would then be saved\r\ninto the config file - _~/.gwtf_:\r\n\r\n    % gwtf --help\r\n    Global Options:\r\n        --data, -d data_dir   - Path to storage directory (default: /home/rip/.gwtf.d)\r\n        --help                - Show this message\r\n        --project, -p project - Active project (default: default)\r\n\r\nNow change the defaults:\r\n\r\n    % gwtf --data=/tmp/gwtf -p acme initconfig\r\n    Created a new project acme in /tmp/gwtf/acme\r\n\r\nAnd confirm the change is active:\r\n\r\n    % gwtf --help\r\n    Global Options:\r\n        --data, -d data_dir   - Path to storage directory (default: /tmp/gwtf)\r\n        --help                - Show this message\r\n        --project, -p project - Active project (default: acme)\r\n\r\nYou can reset to factory defaults by just removing the _~/.gwtf_ file or by changing\r\nthe defaults again.\r\n\r\nYou can also set defaults for options to individual commands, after running initconfig\r\nyour _~/.gwtf_ file will have empty space for each command.  If you wanted to specify a\r\ndefault email address for reminders simply edit that file and put in:\r\n\r\n    commands:\r\n      :remind:\r\n        :recipient: rip@devco.net\r\n\r\nNow _gwtf help remind_ will show it's defaulting to the new email address so you do not\r\nhave to keep typing the --recipient on every invocation.\r\n\r\nContact?\r\n========\r\n\r\nR.I.Pienaar / rip@devco.net / @ripienaar / http://devco.net/\r\n","tagline":"A Unix CLI focussed TODO manager with work logging features","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}